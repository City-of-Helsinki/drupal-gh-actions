on:
  workflow_call:
    inputs:
      caller_repository:
        description: 'The caller repository'
        required: true
        type: string
      caller_ref:
        description: 'The caller Git reference'
        required: true
        type: string
      compose_files:
        description: 'Compose files'
        default: 'compose.yaml:compose.ci.yaml'
        required: false
        type: string
      compose_profiles:
        description: 'Compose profiles'
        default: ''
        required: false
        type: string
      check_security_updates:
        description: 'Whether to scan security updates or not'
        default: true
        required: false
        type: boolean
      check_config_language:
        description: 'Whether to check if configuration was exported in correct language'
        default: true
        required: false
        type: boolean
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: druidfi/stonehenge
          ref: ${{ inputs.stonehenge_version }}

      - name: Install and start Stonehenge
        run: make up

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.caller_repository }}
          ref: ${{ inputs.caller_ref }}

      - name: Make sure configuration was exported in correct language (en or und)
        if: ${{ inputs.check_config_language }}
        run: |
          OUTPUT=$(grep -oP '^langcode: \b(?!(?:en|und)\b)\w+' conf -R || true)
          if [ ! -z "$OUTPUT" ]; then
            echo "Found configuration that does not match the pattern 'langcode: (en|und)':" >> $GITHUB_STEP_SUMMARY
            echo "$OUTPUT" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Setup Docker compose environment variables
        run: |
          echo "COMPOSE_FILE=${{ inputs.compose_files }}" >> $GITHUB_ENV
          echo "COMPOSE_PROFILES=${{ inputs.compose_profiles }}" >> $GITHUB_ENV

      - name: Start compose project
        run: docker compose up -d --wait

      - name: Build project
        run: docker compose exec app bash -c "composer install --no-interaction"

      - name: Scan security updates
        if: ${{ inputs.check_security_updates }}
        run: docker compose exec app bash -c "composer audit"

      - name: Run PHPCS
        run: |
          docker compose exec app bash -c "vendor/bin/phpcs public/modules/custom/"
          docker compose exec app bash -c "vendor/bin/phpcs public/themes/custom/"

      - name: Run phpstan
        run: docker compose exec app bash -c "vendor/bin/phpstan analyze"

      - name: Download latest dump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh run download -n latest.sql

      - name: Install Drupal
        run: |
          docker compose exec app bash -c "mysql --user=drupal --password=drupal --database=drupal --host=db --port=3306 -A < latest.sql"
          docker compose exec app bash -c "drush deploy"

      - name: Run PHPUnit tests
        run: |
          docker compose exec app bash -c "mkdir -p /app/results"
          if [ -d "tests/" ]; then
            docker compose exec app bash -c "composer test-php tests/"
          fi
          docker compose exec app bash -c "composer test-php public/modules/custom"

      - name: Export logs
        if: always()
        run: docker compose logs app > results/service.log

      - name: Create an artifact from test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: results
          path: results/
          retention-days: 1
